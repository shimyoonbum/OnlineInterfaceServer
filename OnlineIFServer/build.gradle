buildscript {
	ext {
    	gradleSshVersion = '2.2.0' //아래 gradle-ssh-plugin에서 사용할 버전 명시
    }
    repositories {
        mavenCentral()
        maven { url "http://repo.spring.io/libs-milestone" }
    }
    dependencies {
        classpath 'io.spring.gradle:dependency-management-plugin:0.5.1.RELEASE' 
        classpath("org.hidetake:gradle-ssh-plugin:${gradleSshVersion}") //gradle 플러그인 의존성 추가    
    }
}

plugins {
	id 'org.springframework.boot' version '2.1.6.RELEASE'
}

//플러그인 적용
apply plugin: 'org.hidetake.ssh'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'java'
apply plugin: 'eclipse-wtp'
apply plugin: 'idea'

group = 'OnlineIFServer'
version = project.properties["deployVersion"]
sourceCompatibility = '1.8'

repositories {
	mavenCentral()
    maven { url "http://repo.spring.io/libs-milestone" }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-rest'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	runtimeOnly 'mysql:mysql-connector-java'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation 'org.projectlombok:lombok:1.18.10'
    annotationProcessor 'org.projectlombok:lombok:1.18.10'
	implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.2'
	implementation 'com.google.code.gson:gson:2.3.1'
    implementation 'javax.servlet:jstl:1.2'	
    implementation 'org.springframework.boot:spring-boot-starter-tomcat'
    implementation 'org.apache.tomcat.embed:tomcat-embed-jasper'
    implementation 'io.jsonwebtoken:jjwt:0.9.0'    
	implementation fileTree(dir: 'lib', include: ['*.jar'])
}

remotes {
    publicServer {
        host = project.properties["publicHost"]
        user = project.properties["publicUser"]
        password = project.properties["publicPassword"]
        publicDir = project.properties["publicDir"]
        knownHosts = allowAnyHosts //알 수 없는 호스트라도 접속 가능
    }
}

task scp {
    ssh.run {
        //remotes.publicServer으로 호스트 세션 시작
        session(remotes.publicServer) {

            // war 파일명을 로컬변수에 지정
            final jarName = "target/OnlineIFServer-${version}.jar"
            println "jar 이름 : ${jarName}"

            println "${remotes.publicServer.host} 서버 파일 전송 시작"
			
            //from : 현재 폴더를 기준으로 from path 지정, into : 도착서버의 디렉토리 path 지정
            put from: "${jarName}", into: project.properties["publicDir"]
			
            println "서버 파일 전송 완료"    
            
			final psOld = execute "ps -ef|grep com.pulmuone.OnlineIFServer.RestApplication|grep -v grep|cut -d \" \" -f2"
			 
            execute "cd ./OnlineIFServer/bin; ./OnlineIFServer.sh ${version} restart"  
			 
			final psNew = execute "ps -ef|grep com.pulmuone.OnlineIFServer.RestApplication|grep -v grep|cut -d \" \" -f2"
			
			if(psOld == psNew) {
				println "서버 재실행 실패"
				return
			}
            println "서버 재실행 완료"

            execute "cd ./OnlineIFServer/bin; old_jar=\"\$(ls *.jar|grep -v ${version})\"; if [ \"\${old_jar}\" != \"\" -a \"\${old_jar}\" != \"OnlineIFServer-${version}.jar\" ]; then mv \${old_jar} ../Old/; else echo none; fi "
        }
    }
}
